<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Inertia\Inertia;
use App\Models\Product;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class DashboardCompanyController extends Controller
{
    public function index()
    {
        $userId = Auth::id();

        // Obter todos os produtos da empresa logada com as categorias e usuário associados
        $products = Product::with('category:id,nmcategory,color', 'user:id,document,name,email')
            ->where('iduser', $userId)
            ->get();

        // Calcular o total de produtos vendidos para esta empresa
        $totalSold = DB::table('order_items')
            ->join('products', 'order_items.idproduct', '=', 'products.id')
            ->where('products.iduser', $userId)
            ->sum('order_items.qtproduct');

        // Calcular o estoque atual
        $currentStock = Product::where('iduser', $userId)->sum('qtproduct');

        // Calcular o estoque inicial como sendo o total vendido + estoque atual
        $initialStock = $totalSold + $currentStock;

        // Calcular o percentual vendido
        $percentSold = $initialStock > 0 ? ($totalSold / $initialStock) * 100 : 0;

        // Calcular a receita total
        $totalRevenue = $this->getTotalRevenue($userId);

        // Organizar as informações de estoque
        $stockInfo = [
            'initialStock' => $initialStock,
            'currentStock' => $currentStock,
            'totalSold' => number_format($totalSold, 0),
            'percentSold' => number_format($percentSold, 2),
        ];

        // Obter dados para o gráfico de pizza
        $soldProducts = DB::table('order_items')
            ->join('products', 'order_items.idproduct', '=', 'products.id')
            ->select('products.nmproduct', DB::raw('SUM(order_items.price * order_items.qtproduct) as total_price'), DB::raw('SUM(order_items.qtproduct) as total_sold'))
            ->where('products.iduser', $userId)
            ->groupBy('products.nmproduct')
            ->get();

        $pieChartData = [];
        foreach ($soldProducts as $product) {
            $pieChartData[] = [
                'name' => $product->nmproduct,
                'value' => floatval($product->total_price),
                'total_sold' => intval($product->total_sold),
            ];
        }

        return Inertia::render('DashboardCompany', [
            'products' => $products,
            'stockInfo' => $stockInfo,
            'totalRevenue' => number_format($totalRevenue, 2, ',', '.'),
            'pieChartData' => $pieChartData,
        ]);
    }

    /**
     * Retrieve the total revenue generated by the company's sales.
     *
     * @param int $userId
     * @return float
     */
    private function getTotalRevenue($userId)
    {
        return DB::table('order_items')
            ->join('products', 'order_items.idproduct', '=', 'products.id')
            ->where('products.iduser', $userId)
            ->sum(DB::raw('order_items.price * order_items.qtproduct'));
    }
}
